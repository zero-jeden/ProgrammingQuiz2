// Example program
#include <iostream>
#include <string>



#include <iomanip>

class Node {
public:
    int value;
    Node* next = nullptr;
};

Node* insertEnd(Node* head, int key)
{
    Node* temp = new Node();
    temp->value = key;
    if(head == nullptr)
        head = temp;
    else
    {
        Node* curr = head;
        while(curr->next != nullptr)
            curr = curr->next;
        curr->next = temp;
    }
    return head;
}

float interQuartile(Node* head)
{
    //code here
    return 0.0;
}
int main()
{
    Node* test1 = nullptr;  // Start with an empty list

    test1 = insertEnd(test1, 2);
    test1 = insertEnd(test1, 4);
    test1 = insertEnd(test1, 4);
    test1 = insertEnd(test1, 5);
    test1 = insertEnd(test1, 6);
    test1 = insertEnd(test1, 7);
    test1 = insertEnd(test1, 8);
    test1 = insertEnd(test1, 35);

    Node* head = test1;   // head points to the start
    Node* curr = head;    // curr is for traversal
    Node* Q3slow = head;
    Node* Q3fast = head;





    int clock = 0;
    // Example traversal (print values)
    while (curr != nullptr) {
        std::cout << curr->value << " ";
        curr = curr->next;
    }
    std::cout << std::endl;
    curr = head;

    while (curr != nullptr) {

        curr = curr->next->next;
        clock++;


        if (clock % 4 == 1){
          Q3fast = curr;

        }
        if (clock % 4 == 3){
          Q3slow = curr;
        }
        //if (clock % 2 == 0) {
         //   Q3fast = Q3fast->next;
       // }
    }
    std::cout << "Q3slow " << Q3slow->value << std::endl;
    std::cout << "Q3fast " <<Q3fast->value << std::endl;











    std::cout << std::endl;

    return 0;










    return 0;
}



// Example program
#include <iostream>
#include <string>



#include <iomanip>

class Node {
public:
    int value;
    Node* next = nullptr;
};

Node* insertEnd(Node* head, int key)
{
    Node* temp = new Node();
    temp->value = key;
    if(head == nullptr)
        head = temp;
    else
    {
        Node* curr = head;
        while(curr->next != nullptr)
            curr = curr->next;
        curr->next = temp;
    }
    return head;
}

float interQuartile(Node* head)
{
    //code here
    return 0.0;
}
int main()
{
    Node* test1 = nullptr;  // Start with an empty list

    test1 = insertEnd(test1, 2);
    test1 = insertEnd(test1, 4);
    test1 = insertEnd(test1, 4);
    test1 = insertEnd(test1, 5);
    test1 = insertEnd(test1, 6);
    test1 = insertEnd(test1, 7);
    test1 = insertEnd(test1, 8);
    test1 = insertEnd(test1, 35);
    //test1 = insertEnd(test1, 100);

    Node* head = test1;   // head points to the start
    Node* curr = head;    // curr is for traversal
    Node* Q3slow = head;
    Node* Q3fast = head;





    int clock = 0;
    // Example traversal (print values)
    while (curr != nullptr) {
        std::cout << curr->value << " ";
        curr = curr->next;
    }
    std::cout << std::endl;
    curr = head;

    while (curr != nullptr) {

        curr = curr->next;
        clock++;


        if (clock % 4 == 0){
          Q3fast += 3;

        }
        /*if (clock % 4 == 1){
          Q3slow = Q3slow->next->next;
        }*/
       
    }
    //if (clock % 2 == 0) {Q3fast = Q3fast->next;    }
    
    
    
    std::cout << "Q3slow " << Q3slow->value << std::endl;
    std::cout << "Q3fast " <<Q3fast->value << std::endl;











    std::cout << std::endl;

    return 0;










    return 0;
}
